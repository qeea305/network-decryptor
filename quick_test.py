#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุงุฎุชุจุงุฑ ุณุฑูุน ููุฃุฏุงุฉ
Quick Test for the Tool
"""

import sys
import os

def test_imports():
    """ุงุฎุชุจุงุฑ ุงุณุชูุฑุงุฏ ุงูููุชุจุงุช"""
    print("๐ ุงุฎุชุจุงุฑ ุงุณุชูุฑุงุฏ ุงูููุชุจุงุช...")
    
    try:
        import tkinter as tk
        print("โ tkinter - ูุชููุฑ")
    except ImportError:
        print("โ tkinter - ุบูุฑ ูุชููุฑ")
        return False
    
    try:
        import scapy
        print("โ scapy - ูุชููุฑ")
    except ImportError:
        print("โ scapy - ุบูุฑ ูุชููุฑ (ุณูุชู ุชุนุทูู ุงูุชูุงุท ุงูุดุจูุฉ)")
    
    try:
        import cryptography
        print("โ cryptography - ูุชููุฑ")
    except ImportError:
        print("โ cryptography - ุบูุฑ ูุชููุฑ (ุณูุชู ุชุนุทูู ุจุนุถ ููุฒุงุช ุงูุชุดููุฑ)")
    
    try:
        from Crypto.Cipher import AES
        print("โ pycryptodome - ูุชููุฑ")
    except ImportError:
        print("โ pycryptodome - ุบูุฑ ูุชููุฑ (ุณูุชู ุชุนุทูู ุจุนุถ ููุฒุงุช ุงูุชุดููุฑ)")
    
    return True

def test_modules():
    """ุงุฎุชุจุงุฑ ุงููุญุฏุงุช ุงููุญููุฉ"""
    print("\n๐งฉ ุงุฎุชุจุงุฑ ุงููุญุฏุงุช ุงููุญููุฉ...")
    
    try:
        from advanced_crypto import AdvancedDecryption
        crypto = AdvancedDecryption()
        print("โ advanced_crypto - ูุนูู ุจุดูู ุตุญูุญ")
        
        # ุงุฎุชุจุงุฑ ุณุฑูุน
        result = crypto.decode_base64("SGVsbG8=")
        if result == "Hello":
            print("  โ ูู Base64 ูุนูู")
        else:
            print("  โ ูุดููุฉ ูู ูู Base64")
            
    except Exception as e:
        print(f"โ advanced_crypto - ุฎุทุฃ: {str(e)}")
    
    try:
        from session_manager import SessionManager
        session_mgr = SessionManager()
        print("โ session_manager - ูุนูู ุจุดูู ุตุญูุญ")
    except Exception as e:
        print(f"โ session_manager - ุฎุทุฃ: {str(e)}")
    
    try:
        from packet_analyzer import PacketAnalyzer
        analyzer = PacketAnalyzer()
        print("โ packet_analyzer - ูุนูู ุจุดูู ุตุญูุญ")
    except Exception as e:
        print(f"โ packet_analyzer - ุฎุทุฃ: {str(e)}")

def test_decryption():
    """ุงุฎุชุจุงุฑ ุณุฑูุน ููู ุงูุชุดููุฑ"""
    print("\n๐ ุงุฎุชุจุงุฑ ุณุฑูุน ููู ุงูุชุดููุฑ...")
    
    try:
        from advanced_crypto import AdvancedDecryption
        crypto = AdvancedDecryption()
        
        # ุงุฎุชุจุงุฑุงุช ุณุฑูุนุฉ
        tests = [
            ("SGVsbG8gV29ybGQ=", "base64", "Hello World"),
            ("48656c6c6f", "hex", "Hello"),
            ("Khoor", "caesar", "Hello"),
            ("Uryyb", "rot13", "Hello")
        ]
        
        for encrypted, method, expected in tests:
            try:
                if method == "base64":
                    result = crypto.decode_base64(encrypted)
                elif method == "hex":
                    result = crypto.decode_hex(encrypted)
                elif method == "caesar":
                    result = crypto.decode_caesar(encrypted, 3)
                elif method == "rot13":
                    result = crypto.decode_rot13(encrypted)
                
                if expected.lower() in result.lower():
                    print(f"  โ {method.upper()}: {encrypted} โ {result}")
                else:
                    print(f"  โ {method.upper()}: {encrypted} โ {result} (ูุชููุน: {expected})")
                    
            except Exception as e:
                print(f"  โ {method.upper()}: ุฎุทุฃ - {str(e)}")
                
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ูู ุงูุชุดููุฑ: {str(e)}")

def test_gui():
    """ุงุฎุชุจุงุฑ ุงููุงุฌูุฉ ุงูุฑุณูููุฉ"""
    print("\n๐ฅ๏ธ ุงุฎุชุจุงุฑ ุงููุงุฌูุฉ ุงูุฑุณูููุฉ...")
    
    try:
        import tkinter as tk
        
        # ุฅูุดุงุก ูุงูุฐุฉ ุงุฎุชุจุงุฑ
        root = tk.Tk()
        root.title("ุงุฎุชุจุงุฑ")
        root.geometry("300x200")
        
        label = tk.Label(root, text="ุงุฎุชุจุงุฑ ุงููุงุฌูุฉ ุงูุฑุณูููุฉ", font=('Arial', 12))
        label.pack(pady=50)
        
        button = tk.Button(root, text="ุฅุบูุงู", command=root.destroy)
        button.pack()
        
        print("โ ุงููุงุฌูุฉ ุงูุฑุณูููุฉ ุชุนูู ุจุดูู ุตุญูุญ")
        print("  (ุณูุชู ุฅุบูุงู ุงููุงูุฐุฉ ุชููุงุฆูุงู)")
        
        # ุฅุบูุงู ุชููุงุฆู ุจุนุฏ ุซุงููุฉ ูุงุญุฏุฉ
        root.after(1000, root.destroy)
        root.mainloop()
        
    except Exception as e:
        print(f"โ ูุดููุฉ ูู ุงููุงุฌูุฉ ุงูุฑุณูููุฉ: {str(e)}")

def test_files():
    """ุงุฎุชุจุงุฑ ูุฌูุฏ ุงููููุงุช ุงููุทููุจุฉ"""
    print("\n๐ ุงุฎุชุจุงุฑ ูุฌูุฏ ุงููููุงุช...")
    
    required_files = [
        "network_decryptor.py",
        "advanced_crypto.py",
        "session_manager.py",
        "packet_analyzer.py",
        "requirements.txt",
        "config.json"
    ]
    
    for filename in required_files:
        if os.path.exists(filename):
            print(f"โ {filename}")
        else:
            print(f"โ {filename} - ููููุฏ")

def run_main_app():
    """ุชุดุบูู ุงูุชุทุจูู ุงูุฑุฆูุณู"""
    print("\n๐ ุชุดุบูู ุงูุชุทุจูู ุงูุฑุฆูุณู...")
    
    try:
        from network_decryptor import NetworkDecryptorGUI
        
        print("โ ุชู ุชุญููู ุงูุชุทุจูู ุจูุฌุงุญ")
        print("๐ฏ ุจุฏุก ุชุดุบูู ุงููุงุฌูุฉ ุงูุฑุณูููุฉ...")
        
        app = NetworkDecryptorGUI()
        app.run()
        
    except KeyboardInterrupt:
        print("\n๐ ุชู ุฅููุงู ุงูุชุทุจูู ุจูุงุณุทุฉ ุงููุณุชุฎุฏู")
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุชุดุบูู ุงูุชุทุจูู: {str(e)}")
        print("\nุชูุงุตูู ุงูุฎุทุฃ:")
        import traceback
        traceback.print_exc()

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐ง ุงุฎุชุจุงุฑ ุณุฑูุน ูุฃุฏุงุฉ ูู ุชุดููุฑ ุฑุณุงุฆู ุงูุดุจูุฉ")
    print("=" * 60)
    
    # ุงุฎุชุจุงุฑ ุงูููุชุจุงุช
    if not test_imports():
        print("\nโ ูุดู ูู ุงุฎุชุจุงุฑ ุงูููุชุจุงุช ุงูุฃุณุงุณูุฉ")
        return
    
    # ุงุฎุชุจุงุฑ ุงููุญุฏุงุช
    test_modules()
    
    # ุงุฎุชุจุงุฑ ูู ุงูุชุดููุฑ
    test_decryption()
    
    # ุงุฎุชุจุงุฑ ุงููููุงุช
    test_files()
    
    # ุงุฎุชุจุงุฑ ุงููุงุฌูุฉ ุงูุฑุณูููุฉ
    test_gui()
    
    print("\n" + "=" * 60)
    print("โ ุงูุชูู ุงูุงุฎุชุจุงุฑ ุงูุณุฑูุน!")
    
    # ุณุคุงู ุงููุณุชุฎุฏู ุนู ุชุดุบูู ุงูุชุทุจูู
    try:
        choice = input("\nูู ุชุฑูุฏ ุชุดุบูู ุงูุชุทุจูู ุงูุฑุฆูุณูุ (y/n): ").strip().lower()
        if choice in ['y', 'yes', 'ูุนู', '1']:
            run_main_app()
        else:
            print("๐ ุดูุฑุงู ูู!")
    except KeyboardInterrupt:
        print("\n๐ ูุฏุงุนุงู!")

if __name__ == "__main__":
    main()